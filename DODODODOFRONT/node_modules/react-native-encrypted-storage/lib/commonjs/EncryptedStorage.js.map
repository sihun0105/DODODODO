{"version":3,"sources":["EncryptedStorage.ts"],"names":["RNEncryptedStorage","NativeModules","Error","EncryptedStorage","setItem","key","value","cb","then","catch","getItem","removeItem","clear"],"mappings":";;;;;;;AAEA;;AAFA;AAGA,MAAM;AAAEA,EAAAA;AAAF,IAAyBC,0BAA/B;;AAEA,IAAI,CAACD,kBAAL,EAAyB;AACvB,QAAM,IAAIE,KAAJ,CAAU,iCAAV,CAAN;AACD;;AAKc,MAAMC,gBAAN,CAAuB;AACpC;AACF;AACA;AACA;AACA;;AAGE;AACF;AACA;AACA;AACA;AACA;AAEE,SAAOC,OAAP,CACEC,GADF,EAEEC,KAFF,EAGEC,EAHF,EAIwB;AACtB,QAAIA,EAAJ,EAAQ;AACNP,MAAAA,kBAAkB,CAACI,OAAnB,CAA2BC,GAA3B,EAAgCC,KAAhC,EAAuCE,IAAvC,CAA4CD,EAA5C,EAAgDE,KAAhD,CAAsDF,EAAtD;AACA;AACD;;AAED,WAAOP,kBAAkB,CAACI,OAAnB,CAA2BC,GAA3B,EAAgCC,KAAhC,CAAP;AACD;AAED;AACF;AACA;AACA;;;AASE,SAAOI,OAAP,CACEL,GADF,EAEEE,EAFF,EAGiC;AAC/B,QAAIA,EAAJ,EAAQ;AACNP,MAAAA,kBAAkB,CAACU,OAAnB,CAA2BL,GAA3B,EAAgCG,IAAhC,CAAqCD,EAArC,EAAyCE,KAAzC,CAA+CF,EAA/C;AACA;AACD;;AAED,WAAOP,kBAAkB,CAACU,OAAnB,CAA2BL,GAA3B,CAAP;AACD;AAED;AACF;AACA;AACA;;;AASE,SAAOM,UAAP,CACEN,GADF,EAEEE,EAFF,EAGwB;AACtB,QAAIA,EAAJ,EAAQ;AACNP,MAAAA,kBAAkB,CAACW,UAAnB,CAA8BN,GAA9B,EAAmCG,IAAnC,CAAwCD,EAAxC,EAA4CE,KAA5C,CAAkDF,EAAlD;AACA;AACD;;AAED,WAAOP,kBAAkB,CAACW,UAAnB,CAA8BN,GAA9B,CAAP;AACD;AAED;AACF;AACA;;;AAQE,SAAOO,KAAP,CAAaL,EAAb,EAA8D;AAC5D,QAAIA,EAAJ,EAAQ;AACNP,MAAAA,kBAAkB,CAACY,KAAnB,GAA2BJ,IAA3B,CAAgCD,EAAhC,EAAoCE,KAApC,CAA0CF,EAA1C;AACA;AACD;;AAED,WAAOP,kBAAkB,CAACY,KAAnB,EAAP;AACD;;AA7FmC","sourcesContent":["/* eslint-disable no-dupe-class-members */\n\nimport { NativeModules } from 'react-native';\nconst { RNEncryptedStorage } = NativeModules;\n\nif (!RNEncryptedStorage) {\n  throw new Error('RNEncryptedStorage is undefined');\n}\n\nexport type StorageErrorCallback = (error?: Error) => void;\nexport type StorageValueCallback = (error?: Error, value?: string) => void;\n\nexport default class EncryptedStorage {\n  /**\n   * Writes data to the disk, using SharedPreferences or KeyChain, depending on the platform.\n   * @param {string} key - A string that will be associated to the value for later retrieval.\n   * @param {string} value - The data to store.\n   */\n  static setItem(key: string, value: string): Promise<void>;\n\n  /**\n   * Writes data to the disk, using SharedPreferences or KeyChain, depending on the platform.\n   * @param {string} key - A string that will be associated to the value for later retrieval.\n   * @param {string} value - The data to store.\n   * @param {Function} cb - The function to call when the operation completes.\n   */\n  static setItem(key: string, value: string, cb: StorageErrorCallback): void;\n  static setItem(\n    key: string,\n    value: string,\n    cb?: StorageErrorCallback\n  ): void | Promise<void> {\n    if (cb) {\n      RNEncryptedStorage.setItem(key, value).then(cb).catch(cb);\n      return;\n    }\n\n    return RNEncryptedStorage.setItem(key, value);\n  }\n\n  /**\n   * Retrieves data from the disk, using SharedPreferences or KeyChain, depending on the platform and returns it as the specified type.\n   * @param {string} key - A string that is associated to a value.\n   */\n  static getItem(key: string): Promise<string | null>;\n\n  /**\n   * Retrieves data from the disk, using SharedPreferences or KeyChain, depending on the platform and returns it as the specified type.\n   * @param {string} key - A string that is associated to a value.\n   * @param {Function} cb - The function to call when the operation completes.\n   */\n  static getItem(key: string, cb: StorageValueCallback): void;\n  static getItem(\n    key: string,\n    cb?: StorageValueCallback\n  ): void | Promise<string | null> {\n    if (cb) {\n      RNEncryptedStorage.getItem(key).then(cb).catch(cb);\n      return;\n    }\n\n    return RNEncryptedStorage.getItem(key);\n  }\n\n  /**\n   * Deletes data from the disk, using SharedPreferences or KeyChain, depending on the platform.\n   * @param {string} key - A string that is associated to a value.\n   */\n  static removeItem(key: string): Promise<void>;\n\n  /**\n   * Deletes data from the disk, using SharedPreferences or KeyChain, depending on the platform.\n   * @param {string} key - A string that is associated to a value.\n   * @param {Function} cb - The function to call when the operation completes.\n   */\n  static removeItem(key: string, cb: StorageErrorCallback): void;\n  static removeItem(\n    key: string,\n    cb?: StorageErrorCallback\n  ): void | Promise<void> {\n    if (cb) {\n      RNEncryptedStorage.removeItem(key).then(cb).catch(cb);\n      return;\n    }\n\n    return RNEncryptedStorage.removeItem(key);\n  }\n\n  /**\n   * Clears all data from disk, using SharedPreferences or KeyChain, depending on the platform.\n   */\n  static clear(): Promise<void>;\n\n  /**\n   * Clears all data from disk, using SharedPreferences or KeyChain, depending on the platform.\n   * @param {Function} cb - The function to call when the operation completes.\n   */\n  static clear(cb: StorageErrorCallback): void;\n  static clear(cb?: StorageErrorCallback): void | Promise<void> {\n    if (cb) {\n      RNEncryptedStorage.clear().then(cb).catch(cb);\n      return;\n    }\n\n    return RNEncryptedStorage.clear();\n  }\n}\n"]}